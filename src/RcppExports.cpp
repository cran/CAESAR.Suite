// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// gene_embed_weight_cpp
arma::mat gene_embed_weight_cpp(const arma::mat& X, const arma::mat& ce_cell, const arma::sp_mat& adj, const double c);
RcppExport SEXP _CAESAR_Suite_gene_embed_weight_cpp(SEXP XSEXP, SEXP ce_cellSEXP, SEXP adjSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type ce_cell(ce_cellSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type adj(adjSEXP);
    Rcpp::traits::input_parameter< const double >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(gene_embed_weight_cpp(X, ce_cell, adj, c));
    return rcpp_result_gen;
END_RCPP
}
// wpcaCpp
Rcpp::List wpcaCpp(const arma::mat& X, const int& nPCs, const bool& weighted);
RcppExport SEXP _CAESAR_Suite_wpcaCpp(SEXP XSEXP, SEXP nPCsSEXP, SEXP weightedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int& >::type nPCs(nPCsSEXP);
    Rcpp::traits::input_parameter< const bool& >::type weighted(weightedSEXP);
    rcpp_result_gen = Rcpp::wrap(wpcaCpp(X, nPCs, weighted));
    return rcpp_result_gen;
END_RCPP
}
// getneighborhood_fastcpp
arma::sp_umat getneighborhood_fastcpp(const arma::mat x, double radius);
RcppExport SEXP _CAESAR_Suite_getneighborhood_fastcpp(SEXP xSEXP, SEXP radiusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type radius(radiusSEXP);
    rcpp_result_gen = Rcpp::wrap(getneighborhood_fastcpp(x, radius));
    return rcpp_result_gen;
END_RCPP
}
// pdistance_cpp
arma::mat pdistance_cpp(const arma::mat& Ar, const arma::mat& Br, const float& eta);
RcppExport SEXP _CAESAR_Suite_pdistance_cpp(SEXP ArSEXP, SEXP BrSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Ar(ArSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Br(BrSEXP);
    Rcpp::traits::input_parameter< const float& >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(pdistance_cpp(Ar, Br, eta));
    return rcpp_result_gen;
END_RCPP
}
// gene_embed_cpp
arma::mat gene_embed_cpp(const arma::mat& X, const arma::mat& ce_cell);
RcppExport SEXP _CAESAR_Suite_gene_embed_cpp(SEXP XSEXP, SEXP ce_cellSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type ce_cell(ce_cellSEXP);
    rcpp_result_gen = Rcpp::wrap(gene_embed_cpp(X, ce_cell));
    return rcpp_result_gen;
END_RCPP
}
// weightAdj
arma::sp_mat weightAdj(const arma::mat& pos, const arma::mat& img_embed, const double& radius, const double& width);
RcppExport SEXP _CAESAR_Suite_weightAdj(SEXP posSEXP, SEXP img_embedSEXP, SEXP radiusSEXP, SEXP widthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type pos(posSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type img_embed(img_embedSEXP);
    Rcpp::traits::input_parameter< const double& >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< const double& >::type width(widthSEXP);
    rcpp_result_gen = Rcpp::wrap(weightAdj(pos, img_embed, radius, width));
    return rcpp_result_gen;
END_RCPP
}
// getneighbor_weightmat
arma::sp_mat getneighbor_weightmat(const arma::mat x, const double& radius, const double& width);
RcppExport SEXP _CAESAR_Suite_getneighbor_weightmat(SEXP xSEXP, SEXP radiusSEXP, SEXP widthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< const double& >::type width(widthSEXP);
    rcpp_result_gen = Rcpp::wrap(getneighbor_weightmat(x, radius, width));
    return rcpp_result_gen;
END_RCPP
}
// imFactorCpp
Rcpp::List imFactorCpp(const arma::mat& X, const arma::sp_mat& weiAdj, const arma::vec& w_plus, const arma::vec& mu_int, const arma::mat& B_int, const arma::vec& Lam_int, const arma::mat& Phi_int, const arma::mat& M_int, const arma::cube& R_int, const int& maxIter, const double& epsELBO, const bool& verbose, const bool& Phi_diag);
RcppExport SEXP _CAESAR_Suite_imFactorCpp(SEXP XSEXP, SEXP weiAdjSEXP, SEXP w_plusSEXP, SEXP mu_intSEXP, SEXP B_intSEXP, SEXP Lam_intSEXP, SEXP Phi_intSEXP, SEXP M_intSEXP, SEXP R_intSEXP, SEXP maxIterSEXP, SEXP epsELBOSEXP, SEXP verboseSEXP, SEXP Phi_diagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type weiAdj(weiAdjSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w_plus(w_plusSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu_int(mu_intSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B_int(B_intSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Lam_int(Lam_intSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Phi_int(Phi_intSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type M_int(M_intSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type R_int(R_intSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< const double& >::type epsELBO(epsELBOSEXP);
    Rcpp::traits::input_parameter< const bool& >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const bool& >::type Phi_diag(Phi_diagSEXP);
    rcpp_result_gen = Rcpp::wrap(imFactorCpp(X, weiAdj, w_plus, mu_int, B_int, Lam_int, Phi_int, M_int, R_int, maxIter, epsELBO, verbose, Phi_diag));
    return rcpp_result_gen;
END_RCPP
}
// approxPhi_imFactorCpp
Rcpp::List approxPhi_imFactorCpp(const arma::mat& X, const arma::sp_mat& weiAdj, const arma::vec& mu_int, const arma::mat& B_int, const arma::vec& Lam_int, const arma::mat& Phi_int, const arma::mat& M_int, const arma::mat& R_int, const int& maxIter, const double& epsELBO, const bool& verbose, const bool& Phi_diag);
RcppExport SEXP _CAESAR_Suite_approxPhi_imFactorCpp(SEXP XSEXP, SEXP weiAdjSEXP, SEXP mu_intSEXP, SEXP B_intSEXP, SEXP Lam_intSEXP, SEXP Phi_intSEXP, SEXP M_intSEXP, SEXP R_intSEXP, SEXP maxIterSEXP, SEXP epsELBOSEXP, SEXP verboseSEXP, SEXP Phi_diagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type weiAdj(weiAdjSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu_int(mu_intSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B_int(B_intSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Lam_int(Lam_intSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Phi_int(Phi_intSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type M_int(M_intSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type R_int(R_intSEXP);
    Rcpp::traits::input_parameter< const int& >::type maxIter(maxIterSEXP);
    Rcpp::traits::input_parameter< const double& >::type epsELBO(epsELBOSEXP);
    Rcpp::traits::input_parameter< const bool& >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< const bool& >::type Phi_diag(Phi_diagSEXP);
    rcpp_result_gen = Rcpp::wrap(approxPhi_imFactorCpp(X, weiAdj, mu_int, B_int, Lam_int, Phi_int, M_int, R_int, maxIter, epsELBO, verbose, Phi_diag));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CAESAR_Suite_gene_embed_weight_cpp", (DL_FUNC) &_CAESAR_Suite_gene_embed_weight_cpp, 4},
    {"_CAESAR_Suite_wpcaCpp", (DL_FUNC) &_CAESAR_Suite_wpcaCpp, 3},
    {"_CAESAR_Suite_getneighborhood_fastcpp", (DL_FUNC) &_CAESAR_Suite_getneighborhood_fastcpp, 2},
    {"_CAESAR_Suite_pdistance_cpp", (DL_FUNC) &_CAESAR_Suite_pdistance_cpp, 3},
    {"_CAESAR_Suite_gene_embed_cpp", (DL_FUNC) &_CAESAR_Suite_gene_embed_cpp, 2},
    {"_CAESAR_Suite_weightAdj", (DL_FUNC) &_CAESAR_Suite_weightAdj, 4},
    {"_CAESAR_Suite_getneighbor_weightmat", (DL_FUNC) &_CAESAR_Suite_getneighbor_weightmat, 3},
    {"_CAESAR_Suite_imFactorCpp", (DL_FUNC) &_CAESAR_Suite_imFactorCpp, 13},
    {"_CAESAR_Suite_approxPhi_imFactorCpp", (DL_FUNC) &_CAESAR_Suite_approxPhi_imFactorCpp, 12},
    {NULL, NULL, 0}
};

RcppExport void R_init_CAESAR_Suite(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
